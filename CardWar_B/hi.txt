#include "game.hpp"
#include "card.hpp"
#include <iostream>
#include <stdexcept>
#include <random>
#include <vector>
#include <algorithm>
using namespace std;
namespace ariel {
	Game::Game(Player p1, Player p2): player1_(p1), player2_(p2) {
	
	
		// check if this player is allow to play
		if(!FirstPlayer().isPlayedBefore() && !SecondPlayer().isPlayedBefore()){
			FirstPlayer().SetisPlayedBefore(true);
			SecondPlayer().SetisPlayedBefore(true);
		}
		else{	
			throw std::invalid_argument("ERROR: one of the players was already in a game");
		}
		
		
		//create a deck with all possible cards
		std::vector<std::string> cards = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "PRINCE", "QUEEN", "KING"};
		std::vector<std::string> shapes = {"Heart", "Diamond", "Club", "Spade"};
		
		
		vector<Card> deck;
		for (int i = 0; i <= 12; i++) {
		    for (int j = 0; j <= 3; j++) {
			Card card{cards.at(static_cast<unsigned long>(i)), shapes.at(static_cast<unsigned long>(j))};
			deck.push_back(card);
		    }
		}
		
		
		
		// shuffle the deck
		std::random_device rand;
		std::default_random_engine rng(rand());
		std::shuffle(deck.begin(), deck.end(), rng);
		
		//split deck to two
		std::vector<Card> player1_deck(deck.begin(), deck.begin() + deck.size() / 2);
		std::vector<Card> player2_deck(deck.begin() + deck.size() / 2, deck.end());
		
		FirstPlayer().setDeck(player1_deck);
		SecondPlayer().setDeck(player2_deck);
		
		int i =0 ;
		for(Card card: FirstPlayer().getDeck()){
			cout<< card.getCardValue() << ", " << card.getCardShape() <<endl;
			i++;
		}
		cout<< i <<endl;
		
		
		FirstPlayer().SetcardesTaken(0);
		FirstPlayer().Setstacksize(26);
		SecondPlayer().SetcardesTaken(0);
		SecondPlayer().Setstacksize(26);
		//cout<< FirstPlayer().getDeck().empty()<<endl;
	}
	
	void Game::playTurn(){
		//cout<< FirstPlayer().cardesTaken()<<endl;
		//cout<< FirstPlayer().getDeck().empty()<<endl;
		//cout<< pop(FirstPlayer().getDeck()).getCardValue() <<endl;
		//cout<<SecondPlayer().getDeck()<<endl;

	}
	
	void Game::printLastTurn(){
	
	}
	
	void Game::playAll(){
	
	}
	
	void Game::printWiner(){
	
	}
	
	void Game::printLog(){
	
	}
	
	void Game::printStats(){
	
	}
	
	Player Game::FirstPlayer(){
		return this->player1_;
	}
			

	Player Game::SecondPlayer(){
		return this->player2_;
	}
	
	
	Card Game::pop(std::vector<Card>& deck) {
		Card firstCard("", "");

		if (!deck.empty()) {
			firstCard = deck.front();
			deck.erase(deck.begin());
		} 
		else {
			throw std::invalid_argument("ERROR: the game is already over!");
		}

		return firstCard;
	}

}
